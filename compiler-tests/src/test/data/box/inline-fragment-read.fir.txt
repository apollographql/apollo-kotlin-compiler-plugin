FILE: inline-fragment-read.kt
    @R|apollo/kotlin/Query|(document = String(
{
  node {
    id
    ... on Product {
      price
    }
    ... on Review {
      text
    }
  }
}
)) public final class GetFooQuery : R|kotlin/Any|, R|apollo/kotlin/Executable<GetFooQuery.Data>| {
        public constructor(): R|GetFooQuery| {
            super<R|kotlin/Any|>()
        }

        public final fun compiledDocument(): R|apollo/kotlin/CompiledDocument|

        public final fun variables(): R|kotlin/collections/Map<kotlin/String, kotlin/Any?>|

        public final fun dataAdapter(): R|apollo/kotlin/Adapter<GetFooQuery.Data>|

        public final class Data : R|kotlin/Any| {
            public final val node: R|GetFooQuery.Node|
                public get(): R|GetFooQuery.Node|

            public constructor(node: R|GetFooQuery.Node|): R|GetFooQuery.Data|

            public final object Adapter : R|apollo/kotlin/Adapter<GetFooQuery.Data>| {
                public final fun fromJson(element: R|apollo/kotlin/JsonElement|): R|GetFooQuery.Data|

                public final fun toJson(value: R|GetFooQuery.Data|): R|apollo/kotlin/JsonElement|

                public constructor(): R|GetFooQuery.Data.Adapter|

            }

        }

        public final class Node : R|kotlin/Any| {
            public final val id: R|kotlin/String|
                public get(): R|kotlin/String|

            public final val onProduct: R|GetFooQuery.OnProduct?|
                public get(): R|GetFooQuery.OnProduct?|

            public final val onReview: R|GetFooQuery.OnReview?|
                public get(): R|GetFooQuery.OnReview?|

            public constructor(id: R|kotlin/String|, onProduct: R|GetFooQuery.OnProduct?|, onReview: R|GetFooQuery.OnReview?|): R|GetFooQuery.Node|

            public final object Adapter : R|apollo/kotlin/Adapter<GetFooQuery.Node>| {
                public final fun fromJson(element: R|apollo/kotlin/JsonElement|): R|GetFooQuery.Node|

                public final fun toJson(value: R|GetFooQuery.Node|): R|apollo/kotlin/JsonElement|

                public constructor(): R|GetFooQuery.Node.Adapter|

            }

        }

        public final class OnProduct : R|kotlin/Any| {
            public final val price: R|kotlin/Double|
                public get(): R|kotlin/Double|

            public constructor(price: R|kotlin/Double|): R|GetFooQuery.OnProduct|

            public final object Adapter : R|apollo/kotlin/Adapter<GetFooQuery.OnProduct>| {
                public final fun fromJson(element: R|apollo/kotlin/JsonElement|): R|GetFooQuery.OnProduct|

                public final fun toJson(value: R|GetFooQuery.OnProduct|): R|apollo/kotlin/JsonElement|

                public constructor(): R|GetFooQuery.OnProduct.Adapter|

            }

        }

        public final class OnReview : R|kotlin/Any| {
            public final val text: R|kotlin/String|
                public get(): R|kotlin/String|

            public constructor(text: R|kotlin/String|): R|GetFooQuery.OnReview|

            public final object Adapter : R|apollo/kotlin/Adapter<GetFooQuery.OnReview>| {
                public final fun fromJson(element: R|apollo/kotlin/JsonElement|): R|GetFooQuery.OnReview|

                public final fun toJson(value: R|GetFooQuery.OnReview|): R|apollo/kotlin/JsonElement|

                public constructor(): R|GetFooQuery.OnReview.Adapter|

            }

        }

        public final companion object Companion : R|kotlin/Any| {
            public final val compiledDocument: R|apollo/kotlin/CompiledDocument|
                public get(): R|apollo/kotlin/CompiledDocument|

            public constructor(): R|GetFooQuery.Companion|

        }

    }
    public final fun box(): R|kotlin/String| {
        lval data: R|GetFooQuery.Data| = Q|GetFooQuery.Data.Adapter|.R|/GetFooQuery.Data.Adapter.fromJson|(R|kotlin/collections/mapOf|<R|kotlin/String|, R|kotlin/collections/Map<kotlin/String, it(kotlin/Comparable<*> & java/io/Serializable)>|>(String(node).R|kotlin/to|<R|kotlin/String|, R|kotlin/collections/Map<kotlin/String, it(kotlin/Comparable<*> & java/io/Serializable)>|>(R|kotlin/collections/mapOf|<R|kotlin/String|, R|it(kotlin/Comparable<*> & java/io/Serializable)|>(vararg(String(id).R|kotlin/to|<R|kotlin/String|, R|kotlin/String|>(String(42)), String(__onProduct).R|kotlin/to|<R|kotlin/String|, R|kotlin/String|>(String(Product)), String(price).R|kotlin/to|<R|kotlin/String|, R|kotlin/Double|>(Double(42.0)))))))
        R|kotlin/check|(==(R|<local>/data|.R|/GetFooQuery.Data.node|.R|/GetFooQuery.Node.onProduct|?.{ $subj$.R|/GetFooQuery.OnProduct.price| }, Double(42.0)))
        R|kotlin/check|(==(R|<local>/data|.R|/GetFooQuery.Data.node|.R|/GetFooQuery.Node.id|, String(42)))
        R|kotlin/check|(==(R|<local>/data|.R|/GetFooQuery.Data.node|.R|/GetFooQuery.Node.onReview|, Null(null)))
        ^box String(OK)
    }
